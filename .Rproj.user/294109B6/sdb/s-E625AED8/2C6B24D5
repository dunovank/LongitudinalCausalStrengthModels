{
    "collab_server" : "",
    "contents" : "library(\"ggplot2\")\nlibrary(\"tidyr\")\nlibrary(\"dplyr\")\n\n###########################################\n########## Rescorla-Wagner model ##########\n###########################################\n\n# Calculates associative strength for different causes\n# Input data frame of binary causes and binary effect\n# Should include background cue\n# effectCol = column number of effect\n\nRW <- function(alpha, df, effectCol) {\n    e <- df[,effectCol] # effect\n    c <- df[,-effectCol] # causes\n    i <- dim(c)[1] # number of observations\n    j <- dim(c)[2] # number of causes\n    \n    # set up columns for computing V\n    arrays <- matrix(nrow=2, ncol=j) # names of all columns\n    for (k in 1:j) {\n        arrays[1,k] <- paste(\"V\", colnames(c)[k], sep=\"\") # V columns\n        arrays[2,k] <- paste(\"dV\", colnames(c)[k], sep=\"\") # deltaV columns\n    }\n    \n    # create arrays\n    V <- matrix(0, nrow=i+1, ncol=j) # V arrays for all causes\n    colnames(V) <- arrays[1,] # name the columns\n    dV <- matrix(0, nrow=i+1, ncol=j) # dV arrays for all causes\n    colnames(dV) <- arrays[2,] # name the columns\n    VTotal <- numeric(i+1) # total V\n    error <- numeric(i+1) # error\n    \n    # compute associative strength\n    for (p in 1:i) {\n        VTotal[p] <- sum(c[p,]*V[p,]) # calculate VTotal\n        error[p] <- e[p]-VTotal[p] # calculate prediction error\n        dV[p,] <- as.numeric(alpha*c[p,]*error[p]) # calculate change in V for each cause\n        V[p+1,] <- as.numeric(V[p,]+dV[p,]) # next trial's associative strength\n    }\n    \n    # return associative strengths\n    df[i+1,] <- NA\n    t <- c(1:(i+1))\n    return(data.frame(t, df, V, VTotal, error, dV))\n}\n\n\n#### Sample data\nc0 <- rep(1,200)\nc1 <- sample(c(0,1), 200, replace = TRUE)\nc2 <- sample(c(0,1), 200, replace = TRUE)\ne <- 1*c1 + (-1)*c2\ndf <- data.frame(e,c0,c1, c2)\n\n#### Sample output\nrw <- RW(alpha=.1, df, effectCol=1)\n\n#### Plots\n\n# Plot error\nggplot(rw, aes(x=t, y=error)) + geom_line()\n\n# Plot V\nrw.V <- rw %>% gather(Vcue, V, Vc0:VTotal) %>% arrange(t, Vcue)\nggplot(rw.V, aes(x=t, color=Vcue, y=V)) + geom_line() \n\n# Plot deltaV\nrw.dV <- rw %>% gather(dVcue, dV, dVc0:dVc2) %>% arrange(t, dVcue)\nggplot(rw.dV, aes(x=t, color=dVcue, y=dV)) + geom_line() \n",
    "created" : 1463666017869.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1963073471",
    "id" : "2C6B24D5",
    "lastKnownWriteTime" : 1463665915,
    "last_content_update" : 1463665915,
    "path" : "~/Box Sync/Projects/LearningCausalStrength/RCode/RW.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}